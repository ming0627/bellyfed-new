// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(uuid())
  cognitoId     String    @unique
  email         String    @unique
  name          String
  nickname      String?
  phone         String?
  emailVerified Boolean   @default(false) @map("email_verified")
  avatarUrl     String?   @map("avatar_url")
  bio           String?
  location      String?
  countryCode   String?   @map("country_code")
  preferences   Json?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  reviews       Review[]
  importJobs    ImportJob[]

  @@map("users")
}

// Restaurant model
model Restaurant {
  id           String    @id @default(uuid()) @map("restaurant_id")
  name         String
  slug         String?
  description  String?
  address      String?
  city         String?
  state        String?
  postalCode   String?   @map("postal_code")
  country      String?
  countryCode  String?   @map("country_code")
  latitude     Decimal?  @db.Decimal(10, 8)
  longitude    Decimal?  @db.Decimal(11, 8)
  phone        String?
  website      String?
  email        String?
  cuisineType  String?   @map("cuisine_type")
  priceRange   String?   @map("price_range")
  openingHours Json?     @map("opening_hours")
  features     Json?
  imageUrl     String?   @map("image_url")
  logoUrl      String?   @map("logo_url")
  dataSource   String?   @default("USER_CREATED") @map("data_source")
  isVerified   Boolean?  @default(false) @map("is_verified")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  dishes       Dish[]
  reviews      Review[]
  importedFrom ImportedRestaurant[]

  @@map("restaurants")
}

// Dish model
model Dish {
  id             String    @id @default(uuid()) @map("dish_id")
  name           String
  slug           String
  description    String?
  restaurantId   String    @map("restaurant_id")
  restaurantName String    @map("restaurant_name")
  category       String?
  imageUrl       String?   @map("image_url")
  isVegetarian   Boolean?  @default(false) @map("is_vegetarian")
  spicyLevel     Int?      @default(0) @map("spicy_level")
  price          Decimal?  @db.Decimal(10, 2)
  countryCode    String?   @map("country_code")
  dataSource     String?   @default("USER_CREATED") @map("data_source")
  isVerified     Boolean?  @default(false) @map("is_verified")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  restaurant     Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  importedFrom   ImportedDish[]

  @@map("dishes")
}

// Review model
model Review {
  id           String     @id @default(uuid()) @map("review_id")
  userId       String     @map("user_id")
  restaurantId String     @map("restaurant_id")
  dishId       String?    @map("dish_id")
  rating       Int
  comment      String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// External Data Source model
model ExternalDataSource {
  id                 String    @id @default(uuid()) @map("source_id")
  name               String
  description        String?
  apiEndpoint        String?   @map("api_endpoint")
  authMethod         String?   @map("auth_method")
  apiVersion         String?   @map("api_version")
  rateLimitPerSecond Int?      @map("rate_limit_per_second")
  rateLimitPerDay    Int?      @map("rate_limit_per_day")
  config             Json?
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  // Relations
  importJobs         ImportJob[]
  importedRestaurants ImportedRestaurant[]
  importedDishes     ImportedDish[]

  @@map("external_data_sources")
}

// Import Job model
model ImportJob {
  id               String    @id @default(uuid()) @map("job_id")
  sourceId         String    @map("source_id")
  userId           String    @map("user_id")
  jobType          String    @map("job_type")
  status           String
  startedAt        DateTime  @default(now()) @map("started_at")
  completedAt      DateTime? @map("completed_at")
  totalRecords     Int       @default(0) @map("total_records")
  processedRecords Int       @default(0) @map("processed_records")
  successRecords   Int       @default(0) @map("success_records")
  errorRecords     Int       @default(0) @map("error_records")
  errorDetails     Json?     @map("error_details")
  parameters       Json?
  region           String?
  searchQuery      String?   @map("search_query")
  eventId          String?   @map("event_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  source           ExternalDataSource @relation(fields: [sourceId], references: [id])
  user             User               @relation(fields: [userId], references: [id])
  importBatches    ImportBatch[]

  @@index([userId])
  @@index([sourceId])
  @@index([status])
  @@index([jobType])
  @@index([createdAt])
  @@map("import_jobs")
}

// Import Batch model for chunking large imports
model ImportBatch {
  id           String    @id @default(uuid()) @map("batch_id")
  jobId        String    @map("job_id")
  batchNumber  Int       @map("batch_number")
  status       String
  itemCount    Int       @map("item_count")
  startedAt    DateTime  @default(now()) @map("started_at")
  completedAt  DateTime? @map("completed_at")
  errorDetails Json?     @map("error_details")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  importJob    ImportJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([status])
  @@index([createdAt])
  @@unique([jobId, batchNumber])
  @@map("import_batches")
}

// Imported Restaurant model
model ImportedRestaurant {
  id             String    @id @default(uuid()) @map("import_id")
  restaurantId   String    @map("restaurant_id")
  sourceId       String    @map("source_id")
  externalId     String    @map("external_id")
  importDate     DateTime  @default(now()) @map("import_date")
  lastUpdated    DateTime  @default(now()) @map("last_updated")
  rawData        Json?     @map("raw_data")
  status         String    @default("ACTIVE")
  confidenceScore Decimal? @map("confidence_score") @db.Decimal(5, 2)
  matchMethod    String?   @map("match_method")
  lastVerified   DateTime? @map("last_verified")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  restaurant     Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  source         ExternalDataSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, sourceId], name: "unique_restaurant_source")
  @@map("imported_restaurants")
}

// Imported Dish model
model ImportedDish {
  id             String    @id @default(uuid()) @map("import_id")
  dishId         String    @map("dish_id")
  restaurantId   String    @map("restaurant_id")
  sourceId       String    @map("source_id")
  externalId     String?   @map("external_id")
  externalMenuId String?   @map("external_menu_id")
  importDate     DateTime  @default(now()) @map("import_date")
  lastUpdated    DateTime  @default(now()) @map("last_updated")
  rawData        Json?     @map("raw_data")
  status         String    @default("ACTIVE")
  confidenceScore Decimal? @map("confidence_score") @db.Decimal(5, 2)
  matchMethod    String?   @map("match_method")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  dish           Dish @relation(fields: [dishId], references: [id], onDelete: Cascade)
  source         ExternalDataSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@unique([dishId, sourceId], name: "unique_dish_source")
  @@map("imported_dishes")
}

// Outbox Event model for reliable event delivery
model OutboxEvent {
  id          String    @id @default(uuid())
  aggregateId String
  eventType   String
  payload     String    @db.Text
  status      String    @default("PENDING")
  processedAt DateTime? @map("processed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([status, createdAt])
  @@index([aggregateId])
  @@index([eventType])
  @@index([processedAt])
  @@map("outbox_events")
}
