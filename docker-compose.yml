# Docker Compose configuration for Bellyfed application
# Production-ready setup with all services

version: '3.8'

services:
  # Frontend Next.js application
  frontend:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: runner
    container_name: bellyfed-frontend
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=http://backend:4000
      - NEXT_PUBLIC_TRPC_URL=http://backend:4000/trpc
    depends_on:
      - backend
      - database
    networks:
      - bellyfed-network
    restart: unless-stopped
    healthcheck:
      test:
        ['CMD', 'wget', '-q', '--spider', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend tRPC API
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
      target: runner
    container_name: bellyfed-backend
    ports:
      - '4000:4000'
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://bellyfed:bellyfed_password@database:5432/bellyfed
      - JWT_SECRET=your-jwt-secret-change-in-production
      - AWS_REGION=us-east-1
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
    depends_on:
      - database
    networks:
      - bellyfed-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'wget', '-q', '--spider', 'http://localhost:4000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Documentation site
  docs:
    build:
      context: .
      dockerfile: apps/docs/Dockerfile
      target: runner
    container_name: bellyfed-docs
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    networks:
      - bellyfed-network
    restart: unless-stopped
    healthcheck:
      test:
        ['CMD', 'wget', '-q', '--spider', 'http://localhost:3001/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  database:
    image: postgres:15-alpine
    container_name: bellyfed-database
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=bellyfed
      - POSTGRES_USER=bellyfed
      - POSTGRES_PASSWORD=bellyfed_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/db/init:/docker-entrypoint-initdb.d
    networks:
      - bellyfed-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U bellyfed -d bellyfed']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: bellyfed-redis
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - bellyfed-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: bellyfed-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - docs
    networks:
      - bellyfed-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'wget', '-q', '--spider', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  bellyfed-network:
    driver: bridge
