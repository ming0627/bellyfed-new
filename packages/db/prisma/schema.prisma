// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with profile information
model User {
  id             String   @id @default(uuid())
  cognitoId      String?  @unique
  email          String   @unique
  name           String?
  nickname       String?
  bio            String?
  location       String?
  countryCode    String?
  phone          String?
  emailVerified  Boolean  @default(false)
  profileImageUrl String?
  avatarUrl      String?
  preferences    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  dishRankings DishRanking[]
  followers    UserFollower[] @relation("UserFollowers")
  following    UserFollower[] @relation("UserFollowing")
  reviews      Review[]

  // Indexes
  @@index([cognitoId])
}

// User follower relationship
model UserFollower {
  id         String   @id @default(uuid())
  followerId String
  followedId String
  createdAt  DateTime @default(now())

  // Relations
  follower User @relation("UserFollowing", fields: [followerId], references: [id])
  followed User @relation("UserFollowers", fields: [followedId], references: [id])

  // Indexes
  @@unique([followerId, followedId])
  @@index([followerId])
  @@index([followedId])
}

// Dish ranking model
model DishRanking {
  id        String   @id @default(uuid())
  userId    String
  dishId    String
  rating    Int
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  dish Dish @relation(fields: [dishId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([userId, dishId])
  @@index([userId])
  @@index([dishId])
}

// Analytics event model
model AnalyticsEvent {
  id            String   @id @default(uuid())
  type          String
  action        String
  timestamp     DateTime
  userId        String?
  traceId       String?
  source        String
  duration      Int?
  status        String
  errorType     String?
  eventCategory String
  properties    Json
  createdAt     DateTime @default(now())

  // Indexes
  @@index([userId])
  @@index([type])
  @@index([action])
  @@index([eventCategory])
  @@index([timestamp])
}

// Analytics view model
model AnalyticsView {
  id            String   @id @default(uuid())
  entityType    String
  entityId      String
  viewCount     Int      @default(0)
  uniqueViewers Int      @default(0)
  lastUpdated   DateTime @default(now())

  // Indexes
  @@unique([entityType, entityId])
  @@index([entityType])
  @@index([lastUpdated])
}

// Analytics viewer model
model AnalyticsViewer {
  id         String   @id @default(uuid())
  entityType String
  entityId   String
  userId     String
  date       DateTime @default(now())

  // Indexes
  @@unique([entityType, entityId, userId, date])
  @@index([entityType, entityId])
  @@index([date])
}

// Analytics engagement model
model AnalyticsEngagement {
  id             String   @id @default(uuid())
  entityType     String
  entityId       String
  userId         String?
  engagementType String
  metadata       Json?
  timestamp      DateTime @default(now())

  // Indexes
  @@index([entityType, entityId])
  @@index([engagementType])
  @@index([timestamp])
}

// Analytics engagement count model
model AnalyticsEngagementCount {
  id             String   @id @default(uuid())
  entityType     String
  entityId       String
  engagementType String
  count          Int      @default(0)
  lastUpdated    DateTime @default(now())

  // Indexes
  @@unique([entityType, entityId, engagementType])
  @@index([entityType])
  @@index([engagementType])
}

// Analytics cache model
model AnalyticsCache {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  lastUpdated DateTime @default(now())
  expiresAt   DateTime?

  // Indexes
  @@index([expiresAt])
}

// Dish model
model Dish {
  id           String        @id @default(uuid())
  restaurantId String
  name         String
  description  String?
  price        Float?
  dishType     String?
  tags         String[]      @default([])
  imageUrl     String?
  isSeasonal   Boolean       @default(false)
  isAvailable  Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  rankings     DishRanking[]

  // Indexes
  @@index([restaurantId])
  @@index([dishType])
  @@index([isAvailable])
}

// Restaurant model
model Restaurant {
  id            String           @id @default(uuid())
  googlePlaceId String           @unique
  name          String
  address       String
  latitude      Float
  longitude     Float
  phone         String?
  website       String?
  rating        Float?
  priceLevel    Int?
  countryCode   String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  photos        RestaurantPhoto[]
  hours         RestaurantHour[]
  reviews       Review[]
  dishes        Dish[]

  // Indexes
  @@index([googlePlaceId])
  @@index([name])
  @@index([countryCode])
}

// Restaurant photo model
model RestaurantPhoto {
  id             String     @id @default(uuid())
  restaurantId   String
  photoUrl       String
  photoReference String
  width          Int
  height         Int
  restaurant     Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([restaurantId])
}

// Restaurant hour model
model RestaurantHour {
  id           String     @id @default(uuid())
  restaurantId String
  dayOfWeek    Int
  openTime     String
  closeTime    String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([restaurantId])
  @@index([dayOfWeek])
}

// Review model
model Review {
  id           String     @id @default(uuid())
  reviewId     String     @unique
  restaurantId String
  userId       String
  rating       Float
  text         String?
  visitStatus  String     @default("VISITED")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([restaurantId])
  @@index([userId])
  @@index([rating])
}
