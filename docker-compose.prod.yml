# Docker Compose configuration for Bellyfed production environment
# Optimized for production deployment with security and performance

version: '3.8'

services:
  # Frontend Next.js application (production)
  frontend:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: runner
    container_name: bellyfed-frontend-prod
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_TRPC_URL=${NEXT_PUBLIC_TRPC_URL}
      - NEXT_PUBLIC_COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - NEXT_PUBLIC_COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - NEXT_PUBLIC_AWS_REGION=${AWS_REGION}
    depends_on:
      - backend
    networks:
      - bellyfed-prod-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test:
        ['CMD', 'wget', '-q', '--spider', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Backend tRPC API (production)
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
      target: runner
    container_name: bellyfed-backend-prod
    ports:
      - '4000:4000'
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - AWS_REGION=${AWS_REGION}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - redis
    networks:
      - bellyfed-prod-network
    restart: always
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ['CMD', 'wget', '-q', '--spider', 'http://localhost:4000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Documentation site (production)
  docs:
    build:
      context: .
      dockerfile: apps/docs/Dockerfile
      target: runner
    container_name: bellyfed-docs-prod
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    networks:
      - bellyfed-prod-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test:
        ['CMD', 'wget', '-q', '--spider', 'http://localhost:3001/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Redis for caching and sessions (production)
  redis:
    image: redis:7-alpine
    container_name: bellyfed-redis-prod
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
    networks:
      - bellyfed-prod-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Nginx reverse proxy and load balancer (production)
  nginx:
    image: nginx:alpine
    container_name: bellyfed-nginx-prod
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
      - docs
    networks:
      - bellyfed-prod-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ['CMD', 'wget', '-q', '--spider', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

volumes:
  redis_prod_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  bellyfed-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
